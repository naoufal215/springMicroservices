springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: ber.com
  pathsToMatch: /**
  packages-to-scan:
   - "ber.com"
  cache:
    disabled: true

  swagger-ui:
   oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
   oauth:
      client-id: writer
      clientSecret: secret-writer
      useBasicAuthenticationWithAccessCodeGrant: true
  oAuthFlow:
    authorizationUrl: https://localhost:8443/oauth2/authorize
    tokenUrl: https://localhost:8443/oauth2/token


spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}:9999

server:
 port: 7000
 error.include-message: always  
 forward-headers-strategy: framework



logging:
  level:
    root: INFO
    ber.com: DEBUG	
    com.fasterxml.jackson: DEBUG	
    io.swagger.v3: DEBUG

    

api:
 common:
  version: 1.0.0
  title: Product composite API
  description:  simple product composite API
  termsOfService: terms

  license: licence
  licenseUrl: license url 

  externalDocDesc: Doc desc
  externalDocUrl: Doc desc url

  contact:
    name: BER
    url: url
    email: contact@ber.com

 responseCodes:
  ok.description: OK
  badRequest.description: Bad Request, invalid format of the request
  notFound.description: Notfound, the specified id does not exist
  unprocessableEntity.description: unprecessable entity, input parameters caused the precessing to fail

 product-composite:
  get-composite-product:
   description: Returns a composite view of the specified product id
   notes: |
     # Normal reponse
     if the requested product id is found the method will return information regarding:
     1. product infomations
     2. Reviews
     3. Service addresses n (technical information regarding the addresses of the microservices)

     # Expected partial and error responses

     ## Product id 213
     200 - OK, but no reviews will be returned 

     ## Non numerical product id
     400 - A **Bad Request** error will be returned 

     ## Product id 13
     404 - A **Not Found** error will be returned 

     ## Negative product ids
     422 - An **Unprocessable Entity** error will be returned 
  create-composite-product:
   description: Creates a composite product
   notes: |
    # Normal response
    The composite product information posted to the API will be split up and soted as separate product-info and review entities
    # Expected error responses
    1. If a product with the same productId as specified in the posted information already exists,
    an **422 - inprocessable Entity** error with a "duplicate key" error message will be returned
  delete-composite-product:
   description: Deletes a product composite
   notes: |
    # Norma response
    Entites for product information, reviews related to the specified productId will be deleted.
    The implementation of the delete method is idempotent, it can be called several times with the same response.
    This means that a delete request of a non-existing product will return **200 OK**


spring.cloud.stream:
 default.contentType: application/json
 bindings:
  products-out-0:
   destination: products 
   producer:
    required-groups: auditGroup
  reviews-out-0:
   destination: reviews
   producer:
    required-groups: auditGroup



---
spring:
  config:
    activate:
      on-profile: docker

server:
  port: 8080

---
spring:
  config:
    activate:
      on-profile: streaming_partitioned
spring.cloud.stream.bindings.products-out-0.producer:
 partition-key-expression: headers['partitionKey']
 partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
 partition-key-expression: headers['partitionKey']
 partition-count: 2

